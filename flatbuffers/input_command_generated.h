// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_INPUTCOMMAND_DEMOBATTLE_H_
#define FLATBUFFERS_GENERATED_INPUTCOMMAND_DEMOBATTLE_H_

#include "flatbuffers/flatbuffers.h"


namespace DemoBattle {

struct CommandDetail;
struct InputCommand;

MANUALLY_ALIGNED_STRUCT(4) CommandDetail FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t characeter_id_;
  int32_t command_id_;

 public:
  CommandDetail(int32_t characeter_id, int32_t command_id)
    : characeter_id_(flatbuffers::EndianScalar(characeter_id)), command_id_(flatbuffers::EndianScalar(command_id)) { }

  int32_t characeter_id() const { return flatbuffers::EndianScalar(characeter_id_); }
  int32_t command_id() const { return flatbuffers::EndianScalar(command_id_); }
};
STRUCT_END(CommandDetail, 8);

struct InputCommand FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t player_id() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::Vector<const CommandDetail *> *list() const { return GetPointer<const flatbuffers::Vector<const CommandDetail *> *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* player_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* list */) &&
           verifier.Verify(list()) &&
           verifier.EndTable();
  }
};

struct InputCommandBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_player_id(int32_t player_id) { fbb_.AddElement<int32_t>(4, player_id, 0); }
  void add_list(flatbuffers::Offset<flatbuffers::Vector<const CommandDetail *>> list) { fbb_.AddOffset(6, list); }
  InputCommandBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  InputCommandBuilder &operator=(const InputCommandBuilder &);
  flatbuffers::Offset<InputCommand> Finish() {
    auto o = flatbuffers::Offset<InputCommand>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<InputCommand> CreateInputCommand(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t player_id = 0,
   flatbuffers::Offset<flatbuffers::Vector<const CommandDetail *>> list = 0) {
  InputCommandBuilder builder_(_fbb);
  builder_.add_list(list);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

inline const InputCommand *GetInputCommand(const void *buf) { return flatbuffers::GetRoot<InputCommand>(buf); }

inline bool VerifyInputCommandBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<InputCommand>(); }

inline void FinishInputCommandBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<InputCommand> root) { fbb.Finish(root); }

}  // namespace DemoBattle

#endif  // FLATBUFFERS_GENERATED_INPUTCOMMAND_DEMOBATTLE_H_
