// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_NOTIFYSTARTPHASE_DEMOBATTLE_H_
#define FLATBUFFERS_GENERATED_NOTIFYSTARTPHASE_DEMOBATTLE_H_

#include "flatbuffers/flatbuffers.h"


namespace DemoBattle {

struct NotifyStartPhase;

struct NotifyStartPhase FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t seq_id() const { return GetField<int32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* seq_id */) &&
           verifier.EndTable();
  }
};

struct NotifyStartPhaseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_seq_id(int32_t seq_id) { fbb_.AddElement<int32_t>(4, seq_id, 0); }
  NotifyStartPhaseBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NotifyStartPhaseBuilder &operator=(const NotifyStartPhaseBuilder &);
  flatbuffers::Offset<NotifyStartPhase> Finish() {
    auto o = flatbuffers::Offset<NotifyStartPhase>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NotifyStartPhase> CreateNotifyStartPhase(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t seq_id = 0) {
  NotifyStartPhaseBuilder builder_(_fbb);
  builder_.add_seq_id(seq_id);
  return builder_.Finish();
}

inline const NotifyStartPhase *GetNotifyStartPhase(const void *buf) { return flatbuffers::GetRoot<NotifyStartPhase>(buf); }

inline bool VerifyNotifyStartPhaseBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<NotifyStartPhase>(); }

inline void FinishNotifyStartPhaseBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NotifyStartPhase> root) { fbb.Finish(root); }

}  // namespace DemoBattle

#endif  // FLATBUFFERS_GENERATED_NOTIFYSTARTPHASE_DEMOBATTLE_H_
