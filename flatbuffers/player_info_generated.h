// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PLAYERINFO_DEMOBATTLE_H_
#define FLATBUFFERS_GENERATED_PLAYERINFO_DEMOBATTLE_H_

#include "flatbuffers/flatbuffers.h"


namespace DemoBattle {

struct PlayerCharacterInfo;
struct PlayerInfo;

struct PlayerCharacterInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t character_id() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(6); }
  int16_t base_hp() const { return GetField<int16_t>(8, 100); }
  int16_t base_mana() const { return GetField<int16_t>(10, 100); }
  int16_t physical_attack() const { return GetField<int16_t>(12, 10); }
  int16_t magical_attack() const { return GetField<int16_t>(14, 10); }
  int16_t physical_defense() const { return GetField<int16_t>(16, 10); }
  int16_t magical_defense() const { return GetField<int16_t>(18, 10); }
  int16_t speed() const { return GetField<int16_t>(20, 10); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* character_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<int16_t>(verifier, 8 /* base_hp */) &&
           VerifyField<int16_t>(verifier, 10 /* base_mana */) &&
           VerifyField<int16_t>(verifier, 12 /* physical_attack */) &&
           VerifyField<int16_t>(verifier, 14 /* magical_attack */) &&
           VerifyField<int16_t>(verifier, 16 /* physical_defense */) &&
           VerifyField<int16_t>(verifier, 18 /* magical_defense */) &&
           VerifyField<int16_t>(verifier, 20 /* speed */) &&
           verifier.EndTable();
  }
};

struct PlayerCharacterInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_character_id(int32_t character_id) { fbb_.AddElement<int32_t>(4, character_id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(6, name); }
  void add_base_hp(int16_t base_hp) { fbb_.AddElement<int16_t>(8, base_hp, 100); }
  void add_base_mana(int16_t base_mana) { fbb_.AddElement<int16_t>(10, base_mana, 100); }
  void add_physical_attack(int16_t physical_attack) { fbb_.AddElement<int16_t>(12, physical_attack, 10); }
  void add_magical_attack(int16_t magical_attack) { fbb_.AddElement<int16_t>(14, magical_attack, 10); }
  void add_physical_defense(int16_t physical_defense) { fbb_.AddElement<int16_t>(16, physical_defense, 10); }
  void add_magical_defense(int16_t magical_defense) { fbb_.AddElement<int16_t>(18, magical_defense, 10); }
  void add_speed(int16_t speed) { fbb_.AddElement<int16_t>(20, speed, 10); }
  PlayerCharacterInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PlayerCharacterInfoBuilder &operator=(const PlayerCharacterInfoBuilder &);
  flatbuffers::Offset<PlayerCharacterInfo> Finish() {
    auto o = flatbuffers::Offset<PlayerCharacterInfo>(fbb_.EndTable(start_, 9));
    return o;
  }
};

inline flatbuffers::Offset<PlayerCharacterInfo> CreatePlayerCharacterInfo(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t character_id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   int16_t base_hp = 100,
   int16_t base_mana = 100,
   int16_t physical_attack = 10,
   int16_t magical_attack = 10,
   int16_t physical_defense = 10,
   int16_t magical_defense = 10,
   int16_t speed = 10) {
  PlayerCharacterInfoBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_character_id(character_id);
  builder_.add_speed(speed);
  builder_.add_magical_defense(magical_defense);
  builder_.add_physical_defense(physical_defense);
  builder_.add_magical_attack(magical_attack);
  builder_.add_physical_attack(physical_attack);
  builder_.add_base_mana(base_mana);
  builder_.add_base_hp(base_hp);
  return builder_.Finish();
}

struct PlayerInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t player_id() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::Vector<flatbuffers::Offset<PlayerCharacterInfo>> *characters() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<PlayerCharacterInfo>> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* player_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* characters */) &&
           verifier.Verify(characters()) &&
           verifier.VerifyVectorOfTables(characters()) &&
           verifier.EndTable();
  }
};

struct PlayerInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_player_id(int32_t player_id) { fbb_.AddElement<int32_t>(4, player_id, 0); }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(6, name); }
  void add_characters(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PlayerCharacterInfo>>> characters) { fbb_.AddOffset(8, characters); }
  PlayerInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  PlayerInfoBuilder &operator=(const PlayerInfoBuilder &);
  flatbuffers::Offset<PlayerInfo> Finish() {
    auto o = flatbuffers::Offset<PlayerInfo>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<PlayerInfo> CreatePlayerInfo(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t player_id = 0,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<PlayerCharacterInfo>>> characters = 0) {
  PlayerInfoBuilder builder_(_fbb);
  builder_.add_characters(characters);
  builder_.add_name(name);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

inline const PlayerInfo *GetPlayerInfo(const void *buf) { return flatbuffers::GetRoot<PlayerInfo>(buf); }

inline bool VerifyPlayerInfoBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<PlayerInfo>(); }

inline void FinishPlayerInfoBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<PlayerInfo> root) { fbb.Finish(root); }

}  // namespace DemoBattle

#endif  // FLATBUFFERS_GENERATED_PLAYERINFO_DEMOBATTLE_H_
