// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_NOTIFYLEAVEPLAYER_DEMOBATTLE_H_
#define FLATBUFFERS_GENERATED_NOTIFYLEAVEPLAYER_DEMOBATTLE_H_

#include "flatbuffers/flatbuffers.h"


namespace DemoBattle {

struct NotifyLeavePlayer;

struct NotifyLeavePlayer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t player_id() const { return GetField<int32_t>(4, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* player_id */) &&
           verifier.EndTable();
  }
};

struct NotifyLeavePlayerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_player_id(int32_t player_id) { fbb_.AddElement<int32_t>(4, player_id, 0); }
  NotifyLeavePlayerBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NotifyLeavePlayerBuilder &operator=(const NotifyLeavePlayerBuilder &);
  flatbuffers::Offset<NotifyLeavePlayer> Finish() {
    auto o = flatbuffers::Offset<NotifyLeavePlayer>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<NotifyLeavePlayer> CreateNotifyLeavePlayer(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t player_id = 0) {
  NotifyLeavePlayerBuilder builder_(_fbb);
  builder_.add_player_id(player_id);
  return builder_.Finish();
}

inline const DemoBattle::NotifyLeavePlayer *GetNotifyLeavePlayer(const void *buf) { return flatbuffers::GetRoot<DemoBattle::NotifyLeavePlayer>(buf); }

inline bool VerifyNotifyLeavePlayerBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<DemoBattle::NotifyLeavePlayer>(); }

inline void FinishNotifyLeavePlayerBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<DemoBattle::NotifyLeavePlayer> root) { fbb.Finish(root); }

}  // namespace DemoBattle

#endif  // FLATBUFFERS_GENERATED_NOTIFYLEAVEPLAYER_DEMOBATTLE_H_
