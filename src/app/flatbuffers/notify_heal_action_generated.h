// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_NOTIFYHEALACTION_DEMOBATTLE_H_
#define FLATBUFFERS_GENERATED_NOTIFYHEALACTION_DEMOBATTLE_H_

#include "flatbuffers/flatbuffers.h"


namespace DemoBattle {

struct HealDetail;
struct NotifyHealAction;

MANUALLY_ALIGNED_STRUCT(4) HealDetail FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t character_id_;
  int32_t target_player_id_;
  int32_t target_character_id_;
  int32_t action_id_;
  int32_t value_;

 public:
  HealDetail(int32_t character_id, int32_t target_player_id, int32_t target_character_id, int32_t action_id, int32_t value)
    : character_id_(flatbuffers::EndianScalar(character_id)), target_player_id_(flatbuffers::EndianScalar(target_player_id)), target_character_id_(flatbuffers::EndianScalar(target_character_id)), action_id_(flatbuffers::EndianScalar(action_id)), value_(flatbuffers::EndianScalar(value)) { }

  int32_t character_id() const { return flatbuffers::EndianScalar(character_id_); }
  int32_t target_player_id() const { return flatbuffers::EndianScalar(target_player_id_); }
  int32_t target_character_id() const { return flatbuffers::EndianScalar(target_character_id_); }
  int32_t action_id() const { return flatbuffers::EndianScalar(action_id_); }
  int32_t value() const { return flatbuffers::EndianScalar(value_); }
};
STRUCT_END(HealDetail, 20);

struct NotifyHealAction FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t seq_id() const { return GetField<int32_t>(4, 0); }
  int32_t player_id() const { return GetField<int32_t>(6, 0); }
  const flatbuffers::Vector<const HealDetail *> *actions() const { return GetPointer<const flatbuffers::Vector<const HealDetail *> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* seq_id */) &&
           VerifyField<int32_t>(verifier, 6 /* player_id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* actions */) &&
           verifier.Verify(actions()) &&
           verifier.EndTable();
  }
};

struct NotifyHealActionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_seq_id(int32_t seq_id) { fbb_.AddElement<int32_t>(4, seq_id, 0); }
  void add_player_id(int32_t player_id) { fbb_.AddElement<int32_t>(6, player_id, 0); }
  void add_actions(flatbuffers::Offset<flatbuffers::Vector<const HealDetail *>> actions) { fbb_.AddOffset(8, actions); }
  NotifyHealActionBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  NotifyHealActionBuilder &operator=(const NotifyHealActionBuilder &);
  flatbuffers::Offset<NotifyHealAction> Finish() {
    auto o = flatbuffers::Offset<NotifyHealAction>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<NotifyHealAction> CreateNotifyHealAction(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t seq_id = 0,
   int32_t player_id = 0,
   flatbuffers::Offset<flatbuffers::Vector<const HealDetail *>> actions = 0) {
  NotifyHealActionBuilder builder_(_fbb);
  builder_.add_actions(actions);
  builder_.add_player_id(player_id);
  builder_.add_seq_id(seq_id);
  return builder_.Finish();
}

inline const NotifyHealAction *GetNotifyHealAction(const void *buf) { return flatbuffers::GetRoot<NotifyHealAction>(buf); }

inline bool VerifyNotifyHealActionBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<NotifyHealAction>(); }

inline void FinishNotifyHealActionBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<NotifyHealAction> root) { fbb.Finish(root); }

}  // namespace DemoBattle

#endif  // FLATBUFFERS_GENERATED_NOTIFYHEALACTION_DEMOBATTLE_H_
