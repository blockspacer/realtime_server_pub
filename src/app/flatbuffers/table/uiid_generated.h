// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_UIID_H_
#define FLATBUFFERS_GENERATED_UIID_H_

#include "flatbuffers/flatbuffers.h"



struct UiidData;

struct UiidData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *value() const { return GetPointer<const flatbuffers::String *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* value */) &&
           verifier.Verify(value()) &&
           verifier.EndTable();
  }
};

struct UiidDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_value(flatbuffers::Offset<flatbuffers::String> value) { fbb_.AddOffset(4, value); }
  UiidDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  UiidDataBuilder &operator=(const UiidDataBuilder &);
  flatbuffers::Offset<UiidData> Finish() {
    auto o = flatbuffers::Offset<UiidData>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<UiidData> CreateUiidData(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> value = 0) {
  UiidDataBuilder builder_(_fbb);
  builder_.add_value(value);
  return builder_.Finish();
}

inline const UiidData *GetUiidData(const void *buf) { return flatbuffers::GetRoot<UiidData>(buf); }

inline bool VerifyUiidDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<UiidData>(); }

inline void FinishUiidDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<UiidData> root) { fbb.Finish(root); }


#endif  // FLATBUFFERS_GENERATED_UIID_H_
