// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_H_

#include "flatbuffers/flatbuffers.h"



struct TestData;

struct TestData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t n() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *str() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* n */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* str */) &&
           verifier.Verify(str()) &&
           verifier.EndTable();
  }
};

struct TestDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_n(int32_t n) { fbb_.AddElement<int32_t>(4, n, 0); }
  void add_str(flatbuffers::Offset<flatbuffers::String> str) { fbb_.AddOffset(6, str); }
  TestDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TestDataBuilder &operator=(const TestDataBuilder &);
  flatbuffers::Offset<TestData> Finish() {
    auto o = flatbuffers::Offset<TestData>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<TestData> CreateTestData(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t n = 0,
   flatbuffers::Offset<flatbuffers::String> str = 0) {
  TestDataBuilder builder_(_fbb);
  builder_.add_str(str);
  builder_.add_n(n);
  return builder_.Finish();
}

inline const TestData *GetTestData(const void *buf) { return flatbuffers::GetRoot<TestData>(buf); }

inline bool VerifyTestDataBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<TestData>(); }

inline void FinishTestDataBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<TestData> root) { fbb.Finish(root); }


#endif  // FLATBUFFERS_GENERATED_TEST_H_
